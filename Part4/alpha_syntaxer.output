Terminals unused in grammar

    COMM_LINE
    COMM_BLOCK
    UNDEFINED
    NEWLINE


State 48 conflicts: 2 reduce/reduce
State 61 conflicts: 2 reduce/reduce
State 103 conflicts: 1 shift/reduce
State 120 conflicts: 2 reduce/reduce
State 121 conflicts: 2 reduce/reduce
State 122 conflicts: 2 reduce/reduce
State 123 conflicts: 2 reduce/reduce
State 124 conflicts: 2 reduce/reduce
State 125 conflicts: 2 reduce/reduce
State 126 conflicts: 2 reduce/reduce
State 127 conflicts: 2 reduce/reduce
State 128 conflicts: 2 reduce/reduce
State 129 conflicts: 2 reduce/reduce
State 130 conflicts: 2 reduce/reduce
State 163 conflicts: 2 reduce/reduce
State 174 conflicts: 2 reduce/reduce
State 175 conflicts: 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmt: expr SEMICOLON
    3     | ifstmt
    4     | whilestmt
    5     | forstmt
    6     | returnstmt
    7     | BREAK SEMICOLON
    8     | CONTINUE SEMICOLON
    9     | block
   10     | funcdef
   11     | SEMICOLON

   12 stmts: stmt stmts
   13      | ε

   14 expr: assignexpr
   15     | expr PLUS expr
   16     | expr MINUS expr
   17     | expr MULTIPLICATION expr
   18     | expr DIVISION expr
   19     | expr MODULO expr
   20     | expr GREATER_THAN expr
   21     | expr GREATER_OR_EQUAL expr
   22     | expr LESS_THAN expr
   23     | expr LESS_OR_EQUAL expr
   24     | expr EQUAL expr
   25     | expr NOT_EQUAL expr
   26     | exprANDOR
   27     | term

   28 $@1: ε

   29 exprANDOR: expr $@1 AND Q expr

   30 $@2: ε

   31 exprANDOR: expr $@2 OR Q expr

   32 Q: ε

   33 term: LEFT_PAREN expr RIGHT_PAREN
   34     | MINUS expr
   35     | NOT expr
   36     | PLUS_PLUS lvalue
   37     | lvalue PLUS_PLUS
   38     | MINUS_MINUS lvalue
   39     | lvalue MINUS_MINUS
   40     | primary

   41 $@3: ε

   42 assignexpr: lvalue $@3 ASSIGNMENT expr

   43 primary: lvalue
   44        | call
   45        | objectdef
   46        | LEFT_PAREN funcdef RIGHT_PAREN
   47        | const

   48 lvalue: IDENT
   49       | LOCAL IDENT
   50       | COLON_COLON IDENT
   51       | member

   52 member: lvalue DOT IDENT
   53       | lvalue LEFT_BRACKET expr RIGHT_BRACKET
   54       | call DOT IDENT
   55       | call LEFT_BRACKET expr RIGHT_BRACKET

   56 call: call LEFT_PAREN elist RIGHT_PAREN
   57     | lvalue callsuffix
   58     | LEFT_PAREN funcdef RIGHT_PAREN LEFT_PAREN elist RIGHT_PAREN

   59 callsuffix: normcall
   60           | methodcall

   61 $@4: ε

   62 normcall: LEFT_PAREN $@4 elist RIGHT_PAREN

   63 $@5: ε

   64 methodcall: DOT_DOT IDENT LEFT_PAREN $@5 elist RIGHT_PAREN

   65 elist: expr
   66      | elist COMMA expr
   67      | ε

   68 objectdef: LEFT_BRACKET indexed RIGHT_BRACKET
   69          | LEFT_BRACKET elist RIGHT_BRACKET

   70 indexed: indexedelem
   71        | indexed COMMA indexedelem

   72 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE

   73 $@6: ε

   74 block: LEFT_BRACE $@6 stmts RIGHT_BRACE

   75 func_name: IDENT
   76          | ε

   77 func_prefix: FUNCTION func_name

   78 $@7: ε

   79 func_args: LEFT_PAREN $@7 idlist RIGHT_PAREN

   80 func_body: block

   81 funcdef: func_prefix func_args func_body

   82 const: INTCONST
   83      | REALCONST
   84      | STRINGCONST
   85      | NIL
   86      | TRUE
   87      | FALSE

   88 $@8: ε

   89 idlist: IDENT $@8 idlists
   90       | ε

   91 $@9: ε

   92 idlists: COMMA IDENT $@9 idlists
   93        | ε

   94 ifprefix: IF LEFT_PAREN expr RIGHT_PAREN

   95 elseprefix: ELSE

   96 ifstmt: ifprefix stmt
   97       | ifprefix stmt elseprefix stmt

   98 whilestart: WHILE

   99 whilecond: LEFT_PAREN expr RIGHT_PAREN

  100 whilestmt: whilestart whilecond stmt

  101 N: ε

  102 M: ε

  103 $@10: ε

  104 forprefix: FOR $@10 LEFT_PAREN elist SEMICOLON M expr SEMICOLON

  105 forstmt: forprefix N elist RIGHT_PAREN N stmt N

  106 $@11: ε

  107 returnstmt: RETURN $@11 expr SEMICOLON

  108 $@12: ε

  109 returnstmt: RETURN $@12 SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    PLUS (258) 15
    ASSIGNMENT (259) 42
    MINUS (260) 16 34
    MULTIPLICATION (261) 17
    DIVISION (262) 18
    MODULO (263) 19
    PLUS_PLUS (264) 36 37
    MINUS_MINUS (265) 38 39
    UMINUS (266)
    EQUAL (267) 24
    NOT_EQUAL (268) 25
    GREATER_THAN (269) 20
    LESS_THAN (270) 22
    GREATER_OR_EQUAL (271) 21
    LESS_OR_EQUAL (272) 23
    IF (273) 94
    ELSE (274) 95
    WHILE (275) 98
    FOR (276) 104
    FUNCTION (277) 77
    RETURN (278) 107 109
    BREAK (279) 7
    CONTINUE (280) 8
    AND (281) 29
    OR (282) 31
    NOT (283) 35
    LOCAL (284) 49
    TRUE (285) 86
    FALSE (286) 87
    NIL (287) 85
    LEFT_BRACE (288) 72 74
    RIGHT_BRACE (289) 72 74
    LEFT_BRACKET (290) 53 55 68 69
    RIGHT_BRACKET (291) 53 55 68 69
    LEFT_PAREN (292) 33 46 56 58 62 64 79 94 99 104
    RIGHT_PAREN (293) 33 46 56 58 62 64 79 94 99 105
    SEMICOLON (294) 2 7 8 11 104 107 109
    COMMA (295) 66 71 92
    COLON (296) 72
    COLON_COLON (297) 50
    DOT (298) 52 54
    DOT_DOT (299) 64
    COMM_LINE (300)
    COMM_BLOCK (301)
    UNDEFINED (302)
    NEWLINE (303)
    INTCONST <intVal> (304) 82
    REALCONST <doubleVal> (305) 83
    IDENT <stringVal> (306) 48 49 50 52 54 64 75 89 92
    STRINGCONST <stringVal> (307) 84


Nonterminals, with rules where they appear

    $accept (53)
        on left: 0
    program (54)
        on left: 1
        on right: 0
    stmt (55)
        on left: 2 3 4 5 6 7 8 9 10 11
        on right: 12 96 97 100 105
    stmts (56)
        on left: 12 13
        on right: 1 12 74
    expr <expression> (57)
        on left: 14 15 16 17 18 19 20 21 22 23 24 25 26 27
        on right: 2 15 16 17 18 19 20 21 22 23 24 25 29 31 33 34 35 42 53 55 65 66 72 94 99 104 107
    exprANDOR <expression> (58)
        on left: 29 31
        on right: 26
    $@1 (59)
        on left: 28
        on right: 29
    $@2 (60)
        on left: 30
        on right: 31
    Q <intVal> (61)
        on left: 32
        on right: 29 31
    term <expression> (62)
        on left: 33 34 35 36 37 38 39 40
        on right: 27
    assignexpr <expression> (63)
        on left: 42
        on right: 14
    $@3 (64)
        on left: 41
        on right: 42
    primary <expression> (65)
        on left: 43 44 45 46 47
        on right: 40
    lvalue <expression> (66)
        on left: 48 49 50 51
        on right: 36 37 38 39 42 43 52 53 57
    member <expression> (67)
        on left: 52 53 54 55
        on right: 51
    call <expression> (68)
        on left: 56 57 58
        on right: 44 54 55 56
    callsuffix <callVal> (69)
        on left: 59 60
        on right: 57
    normcall <callVal> (70)
        on left: 62
        on right: 59
    $@4 (71)
        on left: 61
        on right: 62
    methodcall <callVal> (72)
        on left: 64
        on right: 60
    $@5 (73)
        on left: 63
        on right: 64
    elist <expression> (74)
        on left: 65 66 67
        on right: 56 58 62 64 66 69 104 105
    objectdef <expression> (75)
        on left: 68 69
        on right: 45
    indexed <pairVal> (76)
        on left: 70 71
        on right: 68 71
    indexedelem <pairVal> (77)
        on left: 72
        on right: 70 71
    block (78)
        on left: 74
        on right: 9 80
    $@6 (79)
        on left: 73
        on right: 74
    func_name <stringVal> (80)
        on left: 75 76
        on right: 77
    func_prefix <expression> (81)
        on left: 77
        on right: 81
    func_args (82)
        on left: 79
        on right: 81
    $@7 (83)
        on left: 78
        on right: 79
    func_body <intVal> (84)
        on left: 80
        on right: 81
    funcdef <expression> (85)
        on left: 81
        on right: 10 46 58
    const <expression> (86)
        on left: 82 83 84 85 86 87
        on right: 47
    idlist (87)
        on left: 89 90
        on right: 79
    $@8 (88)
        on left: 88
        on right: 89
    idlists (89)
        on left: 92 93
        on right: 89 92
    $@9 (90)
        on left: 91
        on right: 92
    ifprefix <intVal> (91)
        on left: 94
        on right: 96 97
    elseprefix <intVal> (92)
        on left: 95
        on right: 97
    ifstmt (93)
        on left: 96 97
        on right: 3
    whilestart <intVal> (94)
        on left: 98
        on right: 100
    whilecond <intVal> (95)
        on left: 99
        on right: 100
    whilestmt (96)
        on left: 100
        on right: 4
    N <intVal> (97)
        on left: 101
        on right: 105
    M <intVal> (98)
        on left: 102
        on right: 104
    forprefix <forVal> (99)
        on left: 104
        on right: 105
    $@10 (100)
        on left: 103
        on right: 104
    forstmt (101)
        on left: 105
        on right: 5
    returnstmt (102)
        on left: 107 109
        on right: 6
    $@11 (103)
        on left: 106
        on right: 107
    $@12 (104)
        on left: 108
        on right: 109


State 0

    0 $accept: • program $end

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    IF            shift, and go to state 4
    WHILE         shift, and go to state 5
    FOR           shift, and go to state 6
    FUNCTION      shift, and go to state 7
    RETURN        shift, and go to state 8
    BREAK         shift, and go to state 9
    CONTINUE      shift, and go to state 10
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    SEMICOLON     shift, and go to state 19
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    $default  reduce using rule 13 (stmts)

    program      go to state 25
    stmt         go to state 26
    stmts        go to state 27
    expr         go to state 28
    exprANDOR    go to state 29
    term         go to state 30
    assignexpr   go to state 31
    primary      go to state 32
    lvalue       go to state 33
    member       go to state 34
    call         go to state 35
    objectdef    go to state 36
    block        go to state 37
    func_prefix  go to state 38
    funcdef      go to state 39
    const        go to state 40
    ifprefix     go to state 41
    ifstmt       go to state 42
    whilestart   go to state 43
    whilestmt    go to state 44
    forprefix    go to state 45
    forstmt      go to state 46
    returnstmt   go to state 47


State 1

   34 term: MINUS • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 48
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 2

   36 term: PLUS_PLUS • lvalue

    LOCAL        shift, and go to state 12
    LEFT_PAREN   shift, and go to state 49
    COLON_COLON  shift, and go to state 20
    IDENT        shift, and go to state 23

    lvalue  go to state 50
    member  go to state 34
    call    go to state 51


State 3

   38 term: MINUS_MINUS • lvalue

    LOCAL        shift, and go to state 12
    LEFT_PAREN   shift, and go to state 49
    COLON_COLON  shift, and go to state 20
    IDENT        shift, and go to state 23

    lvalue  go to state 52
    member  go to state 34
    call    go to state 51


State 4

   94 ifprefix: IF • LEFT_PAREN expr RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 53


State 5

   98 whilestart: WHILE •

    $default  reduce using rule 98 (whilestart)


State 6

  104 forprefix: FOR • $@10 LEFT_PAREN elist SEMICOLON M expr SEMICOLON

    $default  reduce using rule 103 ($@10)

    $@10  go to state 54


State 7

   77 func_prefix: FUNCTION • func_name

    IDENT  shift, and go to state 55

    $default  reduce using rule 76 (func_name)

    func_name  go to state 56


State 8

  107 returnstmt: RETURN • $@11 expr SEMICOLON
  109           | RETURN • $@12 SEMICOLON

    SEMICOLON  reduce using rule 108 ($@12)
    $default   reduce using rule 106 ($@11)

    $@11  go to state 57
    $@12  go to state 58


State 9

    7 stmt: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 59


State 10

    8 stmt: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 60


State 11

   35 term: NOT • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 61
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 12

   49 lvalue: LOCAL • IDENT

    IDENT  shift, and go to state 62


State 13

   86 const: TRUE •

    $default  reduce using rule 86 (const)


State 14

   87 const: FALSE •

    $default  reduce using rule 87 (const)


State 15

   85 const: NIL •

    $default  reduce using rule 85 (const)


State 16

   74 block: LEFT_BRACE • $@6 stmts RIGHT_BRACE

    $default  reduce using rule 73 ($@6)

    $@6  go to state 63


State 17

   68 objectdef: LEFT_BRACKET • indexed RIGHT_BRACKET
   69          | LEFT_BRACKET • elist RIGHT_BRACKET

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 64
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr         go to state 65
    exprANDOR    go to state 29
    term         go to state 30
    assignexpr   go to state 31
    primary      go to state 32
    lvalue       go to state 33
    member       go to state 34
    call         go to state 35
    elist        go to state 66
    objectdef    go to state 36
    indexed      go to state 67
    indexedelem  go to state 68
    const        go to state 40


State 18

   33 term: LEFT_PAREN • expr RIGHT_PAREN
   46 primary: LEFT_PAREN • funcdef RIGHT_PAREN
   58 call: LEFT_PAREN • funcdef RIGHT_PAREN LEFT_PAREN elist RIGHT_PAREN

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    FUNCTION      shift, and go to state 7
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr         go to state 69
    exprANDOR    go to state 29
    term         go to state 30
    assignexpr   go to state 31
    primary      go to state 32
    lvalue       go to state 33
    member       go to state 34
    call         go to state 35
    objectdef    go to state 36
    func_prefix  go to state 38
    funcdef      go to state 70
    const        go to state 40


State 19

   11 stmt: SEMICOLON •

    $default  reduce using rule 11 (stmt)


State 20

   50 lvalue: COLON_COLON • IDENT

    IDENT  shift, and go to state 71


State 21

   82 const: INTCONST •

    $default  reduce using rule 82 (const)


State 22

   83 const: REALCONST •

    $default  reduce using rule 83 (const)


State 23

   48 lvalue: IDENT •

    $default  reduce using rule 48 (lvalue)


State 24

   84 const: STRINGCONST •

    $default  reduce using rule 84 (const)


State 25

    0 $accept: program • $end

    $end  shift, and go to state 72


State 26

   12 stmts: stmt • stmts

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    IF            shift, and go to state 4
    WHILE         shift, and go to state 5
    FOR           shift, and go to state 6
    FUNCTION      shift, and go to state 7
    RETURN        shift, and go to state 8
    BREAK         shift, and go to state 9
    CONTINUE      shift, and go to state 10
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    SEMICOLON     shift, and go to state 19
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    $default  reduce using rule 13 (stmts)

    stmt         go to state 26
    stmts        go to state 73
    expr         go to state 28
    exprANDOR    go to state 29
    term         go to state 30
    assignexpr   go to state 31
    primary      go to state 32
    lvalue       go to state 33
    member       go to state 34
    call         go to state 35
    objectdef    go to state 36
    block        go to state 37
    func_prefix  go to state 38
    funcdef      go to state 39
    const        go to state 40
    ifprefix     go to state 41
    ifstmt       go to state 42
    whilestart   go to state 43
    whilestmt    go to state 44
    forprefix    go to state 45
    forstmt      go to state 46
    returnstmt   go to state 47


State 27

    1 program: stmts •

    $default  reduce using rule 1 (program)


State 28

    2 stmt: expr • SEMICOLON
   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84
    SEMICOLON         shift, and go to state 85

    OR        reduce using rule 30 ($@2)
    $default  reduce using rule 28 ($@1)

    $@1  go to state 86
    $@2  go to state 87


State 29

   26 expr: exprANDOR •

    $default  reduce using rule 26 (expr)


State 30

   27 expr: term •

    $default  reduce using rule 27 (expr)


State 31

   14 expr: assignexpr •

    $default  reduce using rule 14 (expr)


State 32

   40 term: primary •

    $default  reduce using rule 40 (term)


State 33

   37 term: lvalue • PLUS_PLUS
   39     | lvalue • MINUS_MINUS
   42 assignexpr: lvalue • $@3 ASSIGNMENT expr
   43 primary: lvalue •
   52 member: lvalue • DOT IDENT
   53       | lvalue • LEFT_BRACKET expr RIGHT_BRACKET
   57 call: lvalue • callsuffix

    PLUS_PLUS     shift, and go to state 88
    MINUS_MINUS   shift, and go to state 89
    LEFT_BRACKET  shift, and go to state 90
    LEFT_PAREN    shift, and go to state 91
    DOT           shift, and go to state 92
    DOT_DOT       shift, and go to state 93

    ASSIGNMENT  reduce using rule 41 ($@3)
    $default    reduce using rule 43 (primary)

    $@3         go to state 94
    callsuffix  go to state 95
    normcall    go to state 96
    methodcall  go to state 97


State 34

   51 lvalue: member •

    $default  reduce using rule 51 (lvalue)


State 35

   44 primary: call •
   54 member: call • DOT IDENT
   55       | call • LEFT_BRACKET expr RIGHT_BRACKET
   56 call: call • LEFT_PAREN elist RIGHT_PAREN

    LEFT_BRACKET  shift, and go to state 98
    LEFT_PAREN    shift, and go to state 99
    DOT           shift, and go to state 100

    $default  reduce using rule 44 (primary)


State 36

   45 primary: objectdef •

    $default  reduce using rule 45 (primary)


State 37

    9 stmt: block •

    $default  reduce using rule 9 (stmt)


State 38

   81 funcdef: func_prefix • func_args func_body

    LEFT_PAREN  shift, and go to state 101

    func_args  go to state 102


State 39

   10 stmt: funcdef •

    $default  reduce using rule 10 (stmt)


State 40

   47 primary: const •

    $default  reduce using rule 47 (primary)


State 41

   96 ifstmt: ifprefix • stmt
   97       | ifprefix • stmt elseprefix stmt

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    IF            shift, and go to state 4
    WHILE         shift, and go to state 5
    FOR           shift, and go to state 6
    FUNCTION      shift, and go to state 7
    RETURN        shift, and go to state 8
    BREAK         shift, and go to state 9
    CONTINUE      shift, and go to state 10
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    SEMICOLON     shift, and go to state 19
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    stmt         go to state 103
    expr         go to state 28
    exprANDOR    go to state 29
    term         go to state 30
    assignexpr   go to state 31
    primary      go to state 32
    lvalue       go to state 33
    member       go to state 34
    call         go to state 35
    objectdef    go to state 36
    block        go to state 37
    func_prefix  go to state 38
    funcdef      go to state 39
    const        go to state 40
    ifprefix     go to state 41
    ifstmt       go to state 42
    whilestart   go to state 43
    whilestmt    go to state 44
    forprefix    go to state 45
    forstmt      go to state 46
    returnstmt   go to state 47


State 42

    3 stmt: ifstmt •

    $default  reduce using rule 3 (stmt)


State 43

  100 whilestmt: whilestart • whilecond stmt

    LEFT_PAREN  shift, and go to state 104

    whilecond  go to state 105


State 44

    4 stmt: whilestmt •

    $default  reduce using rule 4 (stmt)


State 45

  105 forstmt: forprefix • N elist RIGHT_PAREN N stmt N

    $default  reduce using rule 101 (N)

    N  go to state 106


State 46

    5 stmt: forstmt •

    $default  reduce using rule 5 (stmt)


State 47

    6 stmt: returnstmt •

    $default  reduce using rule 6 (stmt)


State 48

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
   34 term: MINUS expr •

    AND       reduce using rule 28 ($@1)
    AND       [reduce using rule 34 (term)]
    OR        reduce using rule 30 ($@2)
    OR        [reduce using rule 34 (term)]
    $default  reduce using rule 34 (term)

    $@1  go to state 86
    $@2  go to state 87


State 49

   58 call: LEFT_PAREN • funcdef RIGHT_PAREN LEFT_PAREN elist RIGHT_PAREN

    FUNCTION  shift, and go to state 7

    func_prefix  go to state 38
    funcdef      go to state 107


State 50

   36 term: PLUS_PLUS lvalue •
   52 member: lvalue • DOT IDENT
   53       | lvalue • LEFT_BRACKET expr RIGHT_BRACKET
   57 call: lvalue • callsuffix

    LEFT_BRACKET  shift, and go to state 90
    LEFT_PAREN    shift, and go to state 91
    DOT           shift, and go to state 92
    DOT_DOT       shift, and go to state 93

    $default  reduce using rule 36 (term)

    callsuffix  go to state 95
    normcall    go to state 96
    methodcall  go to state 97


State 51

   54 member: call • DOT IDENT
   55       | call • LEFT_BRACKET expr RIGHT_BRACKET
   56 call: call • LEFT_PAREN elist RIGHT_PAREN

    LEFT_BRACKET  shift, and go to state 98
    LEFT_PAREN    shift, and go to state 99
    DOT           shift, and go to state 100


State 52

   38 term: MINUS_MINUS lvalue •
   52 member: lvalue • DOT IDENT
   53       | lvalue • LEFT_BRACKET expr RIGHT_BRACKET
   57 call: lvalue • callsuffix

    LEFT_BRACKET  shift, and go to state 90
    LEFT_PAREN    shift, and go to state 91
    DOT           shift, and go to state 92
    DOT_DOT       shift, and go to state 93

    $default  reduce using rule 38 (term)

    callsuffix  go to state 95
    normcall    go to state 96
    methodcall  go to state 97


State 53

   94 ifprefix: IF LEFT_PAREN • expr RIGHT_PAREN

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 108
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 54

  104 forprefix: FOR $@10 • LEFT_PAREN elist SEMICOLON M expr SEMICOLON

    LEFT_PAREN  shift, and go to state 109


State 55

   75 func_name: IDENT •

    $default  reduce using rule 75 (func_name)


State 56

   77 func_prefix: FUNCTION func_name •

    $default  reduce using rule 77 (func_prefix)


State 57

  107 returnstmt: RETURN $@11 • expr SEMICOLON

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 110
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 58

  109 returnstmt: RETURN $@12 • SEMICOLON

    SEMICOLON  shift, and go to state 111


State 59

    7 stmt: BREAK SEMICOLON •

    $default  reduce using rule 7 (stmt)


State 60

    8 stmt: CONTINUE SEMICOLON •

    $default  reduce using rule 8 (stmt)


State 61

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
   35 term: NOT expr •

    AND       reduce using rule 28 ($@1)
    AND       [reduce using rule 35 (term)]
    OR        reduce using rule 30 ($@2)
    OR        [reduce using rule 35 (term)]
    $default  reduce using rule 35 (term)

    $@1  go to state 86
    $@2  go to state 87


State 62

   49 lvalue: LOCAL IDENT •

    $default  reduce using rule 49 (lvalue)


State 63

   74 block: LEFT_BRACE $@6 • stmts RIGHT_BRACE

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    IF            shift, and go to state 4
    WHILE         shift, and go to state 5
    FOR           shift, and go to state 6
    FUNCTION      shift, and go to state 7
    RETURN        shift, and go to state 8
    BREAK         shift, and go to state 9
    CONTINUE      shift, and go to state 10
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    SEMICOLON     shift, and go to state 19
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    $default  reduce using rule 13 (stmts)

    stmt         go to state 26
    stmts        go to state 112
    expr         go to state 28
    exprANDOR    go to state 29
    term         go to state 30
    assignexpr   go to state 31
    primary      go to state 32
    lvalue       go to state 33
    member       go to state 34
    call         go to state 35
    objectdef    go to state 36
    block        go to state 37
    func_prefix  go to state 38
    funcdef      go to state 39
    const        go to state 40
    ifprefix     go to state 41
    ifstmt       go to state 42
    whilestart   go to state 43
    whilestmt    go to state 44
    forprefix    go to state 45
    forstmt      go to state 46
    returnstmt   go to state 47


State 64

   72 indexedelem: LEFT_BRACE • expr COLON expr RIGHT_BRACE

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 113
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 65

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
   65 elist: expr •

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84

    AND       reduce using rule 28 ($@1)
    OR        reduce using rule 30 ($@2)
    $default  reduce using rule 65 (elist)

    $@1  go to state 86
    $@2  go to state 87


State 66

   66 elist: elist • COMMA expr
   69 objectdef: LEFT_BRACKET elist • RIGHT_BRACKET

    RIGHT_BRACKET  shift, and go to state 114
    COMMA          shift, and go to state 115


State 67

   68 objectdef: LEFT_BRACKET indexed • RIGHT_BRACKET
   71 indexed: indexed • COMMA indexedelem

    RIGHT_BRACKET  shift, and go to state 116
    COMMA          shift, and go to state 117


State 68

   70 indexed: indexedelem •

    $default  reduce using rule 70 (indexed)


State 69

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
   33 term: LEFT_PAREN expr • RIGHT_PAREN

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84
    RIGHT_PAREN       shift, and go to state 118

    OR        reduce using rule 30 ($@2)
    $default  reduce using rule 28 ($@1)

    $@1  go to state 86
    $@2  go to state 87


State 70

   46 primary: LEFT_PAREN funcdef • RIGHT_PAREN
   58 call: LEFT_PAREN funcdef • RIGHT_PAREN LEFT_PAREN elist RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 119


State 71

   50 lvalue: COLON_COLON IDENT •

    $default  reduce using rule 50 (lvalue)


State 72

    0 $accept: program $end •

    $default  accept


State 73

   12 stmts: stmt stmts •

    $default  reduce using rule 12 (stmts)


State 74

   15 expr: expr PLUS • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 120
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 75

   16 expr: expr MINUS • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 121
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 76

   17 expr: expr MULTIPLICATION • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 122
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 77

   18 expr: expr DIVISION • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 123
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 78

   19 expr: expr MODULO • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 124
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 79

   24 expr: expr EQUAL • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 125
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 80

   25 expr: expr NOT_EQUAL • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 126
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 81

   20 expr: expr GREATER_THAN • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 127
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 82

   22 expr: expr LESS_THAN • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 128
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 83

   21 expr: expr GREATER_OR_EQUAL • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 129
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 84

   23 expr: expr LESS_OR_EQUAL • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 130
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 85

    2 stmt: expr SEMICOLON •

    $default  reduce using rule 2 (stmt)


State 86

   29 exprANDOR: expr $@1 • AND Q expr

    AND  shift, and go to state 131


State 87

   31 exprANDOR: expr $@2 • OR Q expr

    OR  shift, and go to state 132


State 88

   37 term: lvalue PLUS_PLUS •

    $default  reduce using rule 37 (term)


State 89

   39 term: lvalue MINUS_MINUS •

    $default  reduce using rule 39 (term)


State 90

   53 member: lvalue LEFT_BRACKET • expr RIGHT_BRACKET

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 133
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 91

   62 normcall: LEFT_PAREN • $@4 elist RIGHT_PAREN

    $default  reduce using rule 61 ($@4)

    $@4  go to state 134


State 92

   52 member: lvalue DOT • IDENT

    IDENT  shift, and go to state 135


State 93

   64 methodcall: DOT_DOT • IDENT LEFT_PAREN $@5 elist RIGHT_PAREN

    IDENT  shift, and go to state 136


State 94

   42 assignexpr: lvalue $@3 • ASSIGNMENT expr

    ASSIGNMENT  shift, and go to state 137


State 95

   57 call: lvalue callsuffix •

    $default  reduce using rule 57 (call)


State 96

   59 callsuffix: normcall •

    $default  reduce using rule 59 (callsuffix)


State 97

   60 callsuffix: methodcall •

    $default  reduce using rule 60 (callsuffix)


State 98

   55 member: call LEFT_BRACKET • expr RIGHT_BRACKET

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 138
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 99

   56 call: call LEFT_PAREN • elist RIGHT_PAREN

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 65
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 139
    objectdef   go to state 36
    const       go to state 40


State 100

   54 member: call DOT • IDENT

    IDENT  shift, and go to state 140


State 101

   79 func_args: LEFT_PAREN • $@7 idlist RIGHT_PAREN

    $default  reduce using rule 78 ($@7)

    $@7  go to state 141


State 102

   81 funcdef: func_prefix func_args • func_body

    LEFT_BRACE  shift, and go to state 16

    block      go to state 142
    func_body  go to state 143


State 103

   96 ifstmt: ifprefix stmt •
   97       | ifprefix stmt • elseprefix stmt

    ELSE  shift, and go to state 144

    ELSE      [reduce using rule 96 (ifstmt)]
    $default  reduce using rule 96 (ifstmt)

    elseprefix  go to state 145


State 104

   99 whilecond: LEFT_PAREN • expr RIGHT_PAREN

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 146
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 105

  100 whilestmt: whilestart whilecond • stmt

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    IF            shift, and go to state 4
    WHILE         shift, and go to state 5
    FOR           shift, and go to state 6
    FUNCTION      shift, and go to state 7
    RETURN        shift, and go to state 8
    BREAK         shift, and go to state 9
    CONTINUE      shift, and go to state 10
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    SEMICOLON     shift, and go to state 19
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    stmt         go to state 147
    expr         go to state 28
    exprANDOR    go to state 29
    term         go to state 30
    assignexpr   go to state 31
    primary      go to state 32
    lvalue       go to state 33
    member       go to state 34
    call         go to state 35
    objectdef    go to state 36
    block        go to state 37
    func_prefix  go to state 38
    funcdef      go to state 39
    const        go to state 40
    ifprefix     go to state 41
    ifstmt       go to state 42
    whilestart   go to state 43
    whilestmt    go to state 44
    forprefix    go to state 45
    forstmt      go to state 46
    returnstmt   go to state 47


State 106

  105 forstmt: forprefix N • elist RIGHT_PAREN N stmt N

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 65
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 148
    objectdef   go to state 36
    const       go to state 40


State 107

   58 call: LEFT_PAREN funcdef • RIGHT_PAREN LEFT_PAREN elist RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 149


State 108

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
   94 ifprefix: IF LEFT_PAREN expr • RIGHT_PAREN

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84
    RIGHT_PAREN       shift, and go to state 150

    OR        reduce using rule 30 ($@2)
    $default  reduce using rule 28 ($@1)

    $@1  go to state 86
    $@2  go to state 87


State 109

  104 forprefix: FOR $@10 LEFT_PAREN • elist SEMICOLON M expr SEMICOLON

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 65
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 151
    objectdef   go to state 36
    const       go to state 40


State 110

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
  107 returnstmt: RETURN $@11 expr • SEMICOLON

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84
    SEMICOLON         shift, and go to state 152

    OR        reduce using rule 30 ($@2)
    $default  reduce using rule 28 ($@1)

    $@1  go to state 86
    $@2  go to state 87


State 111

  109 returnstmt: RETURN $@12 SEMICOLON •

    $default  reduce using rule 109 (returnstmt)


State 112

   74 block: LEFT_BRACE $@6 stmts • RIGHT_BRACE

    RIGHT_BRACE  shift, and go to state 153


State 113

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
   72 indexedelem: LEFT_BRACE expr • COLON expr RIGHT_BRACE

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84
    COLON             shift, and go to state 154

    OR        reduce using rule 30 ($@2)
    $default  reduce using rule 28 ($@1)

    $@1  go to state 86
    $@2  go to state 87


State 114

   69 objectdef: LEFT_BRACKET elist RIGHT_BRACKET •

    $default  reduce using rule 69 (objectdef)


State 115

   66 elist: elist COMMA • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 155
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 116

   68 objectdef: LEFT_BRACKET indexed RIGHT_BRACKET •

    $default  reduce using rule 68 (objectdef)


State 117

   71 indexed: indexed COMMA • indexedelem

    LEFT_BRACE  shift, and go to state 64

    indexedelem  go to state 156


State 118

   33 term: LEFT_PAREN expr RIGHT_PAREN •

    $default  reduce using rule 33 (term)


State 119

   46 primary: LEFT_PAREN funcdef RIGHT_PAREN •
   58 call: LEFT_PAREN funcdef RIGHT_PAREN • LEFT_PAREN elist RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 157

    $default  reduce using rule 46 (primary)


State 120

   15 expr: expr • PLUS expr
   15     | expr PLUS expr •
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr

    MULTIPLICATION  shift, and go to state 76
    DIVISION        shift, and go to state 77
    MODULO          shift, and go to state 78

    AND       reduce using rule 15 (expr)
    AND       [reduce using rule 28 ($@1)]
    OR        reduce using rule 15 (expr)
    OR        [reduce using rule 30 ($@2)]
    $default  reduce using rule 15 (expr)

    $@1  go to state 86
    $@2  go to state 87


State 121

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   16     | expr MINUS expr •
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr

    MULTIPLICATION  shift, and go to state 76
    DIVISION        shift, and go to state 77
    MODULO          shift, and go to state 78

    AND       reduce using rule 16 (expr)
    AND       [reduce using rule 28 ($@1)]
    OR        reduce using rule 16 (expr)
    OR        [reduce using rule 30 ($@2)]
    $default  reduce using rule 16 (expr)

    $@1  go to state 86
    $@2  go to state 87


State 122

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   17     | expr MULTIPLICATION expr •
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr

    AND       reduce using rule 17 (expr)
    AND       [reduce using rule 28 ($@1)]
    OR        reduce using rule 17 (expr)
    OR        [reduce using rule 30 ($@2)]
    $default  reduce using rule 17 (expr)

    $@1  go to state 86
    $@2  go to state 87


State 123

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   18     | expr DIVISION expr •
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr

    AND       reduce using rule 18 (expr)
    AND       [reduce using rule 28 ($@1)]
    OR        reduce using rule 18 (expr)
    OR        [reduce using rule 30 ($@2)]
    $default  reduce using rule 18 (expr)

    $@1  go to state 86
    $@2  go to state 87


State 124

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   19     | expr MODULO expr •
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr

    AND       reduce using rule 19 (expr)
    AND       [reduce using rule 28 ($@1)]
    OR        reduce using rule 19 (expr)
    OR        [reduce using rule 30 ($@2)]
    $default  reduce using rule 19 (expr)

    $@1  go to state 86
    $@2  go to state 87


State 125

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   24     | expr EQUAL expr •
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84

    EQUAL      error (nonassociative)
    NOT_EQUAL  error (nonassociative)

    AND       reduce using rule 24 (expr)
    AND       [reduce using rule 28 ($@1)]
    OR        reduce using rule 24 (expr)
    OR        [reduce using rule 30 ($@2)]
    $default  reduce using rule 24 (expr)

    $@1  go to state 86
    $@2  go to state 87


State 126

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   25     | expr NOT_EQUAL expr •
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84

    EQUAL      error (nonassociative)
    NOT_EQUAL  error (nonassociative)

    AND       reduce using rule 25 (expr)
    AND       [reduce using rule 28 ($@1)]
    OR        reduce using rule 25 (expr)
    OR        [reduce using rule 30 ($@2)]
    $default  reduce using rule 25 (expr)

    $@1  go to state 86
    $@2  go to state 87


State 127

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   20     | expr GREATER_THAN expr •
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr

    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    MULTIPLICATION  shift, and go to state 76
    DIVISION        shift, and go to state 77
    MODULO          shift, and go to state 78

    GREATER_THAN      error (nonassociative)
    LESS_THAN         error (nonassociative)
    GREATER_OR_EQUAL  error (nonassociative)
    LESS_OR_EQUAL     error (nonassociative)

    AND       reduce using rule 20 (expr)
    AND       [reduce using rule 28 ($@1)]
    OR        reduce using rule 20 (expr)
    OR        [reduce using rule 30 ($@2)]
    $default  reduce using rule 20 (expr)

    $@1  go to state 86
    $@2  go to state 87


State 128

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   22     | expr LESS_THAN expr •
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr

    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    MULTIPLICATION  shift, and go to state 76
    DIVISION        shift, and go to state 77
    MODULO          shift, and go to state 78

    GREATER_THAN      error (nonassociative)
    LESS_THAN         error (nonassociative)
    GREATER_OR_EQUAL  error (nonassociative)
    LESS_OR_EQUAL     error (nonassociative)

    AND       reduce using rule 22 (expr)
    AND       [reduce using rule 28 ($@1)]
    OR        reduce using rule 22 (expr)
    OR        [reduce using rule 30 ($@2)]
    $default  reduce using rule 22 (expr)

    $@1  go to state 86
    $@2  go to state 87


State 129

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   21     | expr GREATER_OR_EQUAL expr •
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr

    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    MULTIPLICATION  shift, and go to state 76
    DIVISION        shift, and go to state 77
    MODULO          shift, and go to state 78

    GREATER_THAN      error (nonassociative)
    LESS_THAN         error (nonassociative)
    GREATER_OR_EQUAL  error (nonassociative)
    LESS_OR_EQUAL     error (nonassociative)

    AND       reduce using rule 21 (expr)
    AND       [reduce using rule 28 ($@1)]
    OR        reduce using rule 21 (expr)
    OR        [reduce using rule 30 ($@2)]
    $default  reduce using rule 21 (expr)

    $@1  go to state 86
    $@2  go to state 87


State 130

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   23     | expr LESS_OR_EQUAL expr •
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr

    PLUS            shift, and go to state 74
    MINUS           shift, and go to state 75
    MULTIPLICATION  shift, and go to state 76
    DIVISION        shift, and go to state 77
    MODULO          shift, and go to state 78

    GREATER_THAN      error (nonassociative)
    LESS_THAN         error (nonassociative)
    GREATER_OR_EQUAL  error (nonassociative)
    LESS_OR_EQUAL     error (nonassociative)

    AND       reduce using rule 23 (expr)
    AND       [reduce using rule 28 ($@1)]
    OR        reduce using rule 23 (expr)
    OR        [reduce using rule 30 ($@2)]
    $default  reduce using rule 23 (expr)

    $@1  go to state 86
    $@2  go to state 87


State 131

   29 exprANDOR: expr $@1 AND • Q expr

    $default  reduce using rule 32 (Q)

    Q  go to state 158


State 132

   31 exprANDOR: expr $@2 OR • Q expr

    $default  reduce using rule 32 (Q)

    Q  go to state 159


State 133

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
   53 member: lvalue LEFT_BRACKET expr • RIGHT_BRACKET

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84
    RIGHT_BRACKET     shift, and go to state 160

    OR        reduce using rule 30 ($@2)
    $default  reduce using rule 28 ($@1)

    $@1  go to state 86
    $@2  go to state 87


State 134

   62 normcall: LEFT_PAREN $@4 • elist RIGHT_PAREN

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 65
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 161
    objectdef   go to state 36
    const       go to state 40


State 135

   52 member: lvalue DOT IDENT •

    $default  reduce using rule 52 (member)


State 136

   64 methodcall: DOT_DOT IDENT • LEFT_PAREN $@5 elist RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 162


State 137

   42 assignexpr: lvalue $@3 ASSIGNMENT • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 163
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 138

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
   55 member: call LEFT_BRACKET expr • RIGHT_BRACKET

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84
    RIGHT_BRACKET     shift, and go to state 164

    OR        reduce using rule 30 ($@2)
    $default  reduce using rule 28 ($@1)

    $@1  go to state 86
    $@2  go to state 87


State 139

   56 call: call LEFT_PAREN elist • RIGHT_PAREN
   66 elist: elist • COMMA expr

    RIGHT_PAREN  shift, and go to state 165
    COMMA        shift, and go to state 115


State 140

   54 member: call DOT IDENT •

    $default  reduce using rule 54 (member)


State 141

   79 func_args: LEFT_PAREN $@7 • idlist RIGHT_PAREN

    IDENT  shift, and go to state 166

    $default  reduce using rule 90 (idlist)

    idlist  go to state 167


State 142

   80 func_body: block •

    $default  reduce using rule 80 (func_body)


State 143

   81 funcdef: func_prefix func_args func_body •

    $default  reduce using rule 81 (funcdef)


State 144

   95 elseprefix: ELSE •

    $default  reduce using rule 95 (elseprefix)


State 145

   97 ifstmt: ifprefix stmt elseprefix • stmt

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    IF            shift, and go to state 4
    WHILE         shift, and go to state 5
    FOR           shift, and go to state 6
    FUNCTION      shift, and go to state 7
    RETURN        shift, and go to state 8
    BREAK         shift, and go to state 9
    CONTINUE      shift, and go to state 10
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    SEMICOLON     shift, and go to state 19
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    stmt         go to state 168
    expr         go to state 28
    exprANDOR    go to state 29
    term         go to state 30
    assignexpr   go to state 31
    primary      go to state 32
    lvalue       go to state 33
    member       go to state 34
    call         go to state 35
    objectdef    go to state 36
    block        go to state 37
    func_prefix  go to state 38
    funcdef      go to state 39
    const        go to state 40
    ifprefix     go to state 41
    ifstmt       go to state 42
    whilestart   go to state 43
    whilestmt    go to state 44
    forprefix    go to state 45
    forstmt      go to state 46
    returnstmt   go to state 47


State 146

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
   99 whilecond: LEFT_PAREN expr • RIGHT_PAREN

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84
    RIGHT_PAREN       shift, and go to state 169

    OR        reduce using rule 30 ($@2)
    $default  reduce using rule 28 ($@1)

    $@1  go to state 86
    $@2  go to state 87


State 147

  100 whilestmt: whilestart whilecond stmt •

    $default  reduce using rule 100 (whilestmt)


State 148

   66 elist: elist • COMMA expr
  105 forstmt: forprefix N elist • RIGHT_PAREN N stmt N

    RIGHT_PAREN  shift, and go to state 170
    COMMA        shift, and go to state 115


State 149

   58 call: LEFT_PAREN funcdef RIGHT_PAREN • LEFT_PAREN elist RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 157


State 150

   94 ifprefix: IF LEFT_PAREN expr RIGHT_PAREN •

    $default  reduce using rule 94 (ifprefix)


State 151

   66 elist: elist • COMMA expr
  104 forprefix: FOR $@10 LEFT_PAREN elist • SEMICOLON M expr SEMICOLON

    SEMICOLON  shift, and go to state 171
    COMMA      shift, and go to state 115


State 152

  107 returnstmt: RETURN $@11 expr SEMICOLON •

    $default  reduce using rule 107 (returnstmt)


State 153

   74 block: LEFT_BRACE $@6 stmts RIGHT_BRACE •

    $default  reduce using rule 74 (block)


State 154

   72 indexedelem: LEFT_BRACE expr COLON • expr RIGHT_BRACE

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 172
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 155

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
   66 elist: elist COMMA expr •

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84

    AND       reduce using rule 28 ($@1)
    OR        reduce using rule 30 ($@2)
    $default  reduce using rule 66 (elist)

    $@1  go to state 86
    $@2  go to state 87


State 156

   71 indexed: indexed COMMA indexedelem •

    $default  reduce using rule 71 (indexed)


State 157

   58 call: LEFT_PAREN funcdef RIGHT_PAREN LEFT_PAREN • elist RIGHT_PAREN

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 65
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 173
    objectdef   go to state 36
    const       go to state 40


State 158

   29 exprANDOR: expr $@1 AND Q • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 174
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 159

   31 exprANDOR: expr $@2 OR Q • expr

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 175
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 160

   53 member: lvalue LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 53 (member)


State 161

   62 normcall: LEFT_PAREN $@4 elist • RIGHT_PAREN
   66 elist: elist • COMMA expr

    RIGHT_PAREN  shift, and go to state 176
    COMMA        shift, and go to state 115


State 162

   64 methodcall: DOT_DOT IDENT LEFT_PAREN • $@5 elist RIGHT_PAREN

    $default  reduce using rule 63 ($@5)

    $@5  go to state 177


State 163

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
   42 assignexpr: lvalue $@3 ASSIGNMENT expr •

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84

    AND       reduce using rule 28 ($@1)
    AND       [reduce using rule 42 (assignexpr)]
    OR        reduce using rule 30 ($@2)
    OR        [reduce using rule 42 (assignexpr)]
    $default  reduce using rule 42 (assignexpr)

    $@1  go to state 86
    $@2  go to state 87


State 164

   55 member: call LEFT_BRACKET expr RIGHT_BRACKET •

    $default  reduce using rule 55 (member)


State 165

   56 call: call LEFT_PAREN elist RIGHT_PAREN •

    $default  reduce using rule 56 (call)


State 166

   89 idlist: IDENT • $@8 idlists

    $default  reduce using rule 88 ($@8)

    $@8  go to state 178


State 167

   79 func_args: LEFT_PAREN $@7 idlist • RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 179


State 168

   97 ifstmt: ifprefix stmt elseprefix stmt •

    $default  reduce using rule 97 (ifstmt)


State 169

   99 whilecond: LEFT_PAREN expr RIGHT_PAREN •

    $default  reduce using rule 99 (whilecond)


State 170

  105 forstmt: forprefix N elist RIGHT_PAREN • N stmt N

    $default  reduce using rule 101 (N)

    N  go to state 180


State 171

  104 forprefix: FOR $@10 LEFT_PAREN elist SEMICOLON • M expr SEMICOLON

    $default  reduce using rule 102 (M)

    M  go to state 181


State 172

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
   72 indexedelem: LEFT_BRACE expr COLON expr • RIGHT_BRACE

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84
    RIGHT_BRACE       shift, and go to state 182

    OR        reduce using rule 30 ($@2)
    $default  reduce using rule 28 ($@1)

    $@1  go to state 86
    $@2  go to state 87


State 173

   58 call: LEFT_PAREN funcdef RIGHT_PAREN LEFT_PAREN elist • RIGHT_PAREN
   66 elist: elist • COMMA expr

    RIGHT_PAREN  shift, and go to state 183
    COMMA        shift, and go to state 115


State 174

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   29          | expr $@1 AND Q expr •
   31          | expr • $@2 OR Q expr

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84

    AND       reduce using rule 28 ($@1)
    AND       [reduce using rule 29 (exprANDOR)]
    OR        reduce using rule 29 (exprANDOR)
    OR        [reduce using rule 30 ($@2)]
    $default  reduce using rule 29 (exprANDOR)

    $@1  go to state 86
    $@2  go to state 87


State 175

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
   31          | expr $@2 OR Q expr •

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84

    AND       reduce using rule 28 ($@1)
    AND       [reduce using rule 31 (exprANDOR)]
    OR        reduce using rule 30 ($@2)
    OR        [reduce using rule 31 (exprANDOR)]
    $default  reduce using rule 31 (exprANDOR)

    $@1  go to state 86
    $@2  go to state 87


State 176

   62 normcall: LEFT_PAREN $@4 elist RIGHT_PAREN •

    $default  reduce using rule 62 (normcall)


State 177

   64 methodcall: DOT_DOT IDENT LEFT_PAREN $@5 • elist RIGHT_PAREN

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    $default  reduce using rule 67 (elist)

    expr        go to state 65
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    elist       go to state 184
    objectdef   go to state 36
    const       go to state 40


State 178

   89 idlist: IDENT $@8 • idlists

    COMMA  shift, and go to state 185

    $default  reduce using rule 93 (idlists)

    idlists  go to state 186


State 179

   79 func_args: LEFT_PAREN $@7 idlist RIGHT_PAREN •

    $default  reduce using rule 79 (func_args)


State 180

  105 forstmt: forprefix N elist RIGHT_PAREN N • stmt N

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    IF            shift, and go to state 4
    WHILE         shift, and go to state 5
    FOR           shift, and go to state 6
    FUNCTION      shift, and go to state 7
    RETURN        shift, and go to state 8
    BREAK         shift, and go to state 9
    CONTINUE      shift, and go to state 10
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACE    shift, and go to state 16
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    SEMICOLON     shift, and go to state 19
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    stmt         go to state 187
    expr         go to state 28
    exprANDOR    go to state 29
    term         go to state 30
    assignexpr   go to state 31
    primary      go to state 32
    lvalue       go to state 33
    member       go to state 34
    call         go to state 35
    objectdef    go to state 36
    block        go to state 37
    func_prefix  go to state 38
    funcdef      go to state 39
    const        go to state 40
    ifprefix     go to state 41
    ifstmt       go to state 42
    whilestart   go to state 43
    whilestmt    go to state 44
    forprefix    go to state 45
    forstmt      go to state 46
    returnstmt   go to state 47


State 181

  104 forprefix: FOR $@10 LEFT_PAREN elist SEMICOLON M • expr SEMICOLON

    MINUS         shift, and go to state 1
    PLUS_PLUS     shift, and go to state 2
    MINUS_MINUS   shift, and go to state 3
    NOT           shift, and go to state 11
    LOCAL         shift, and go to state 12
    TRUE          shift, and go to state 13
    FALSE         shift, and go to state 14
    NIL           shift, and go to state 15
    LEFT_BRACKET  shift, and go to state 17
    LEFT_PAREN    shift, and go to state 18
    COLON_COLON   shift, and go to state 20
    INTCONST      shift, and go to state 21
    REALCONST     shift, and go to state 22
    IDENT         shift, and go to state 23
    STRINGCONST   shift, and go to state 24

    expr        go to state 188
    exprANDOR   go to state 29
    term        go to state 30
    assignexpr  go to state 31
    primary     go to state 32
    lvalue      go to state 33
    member      go to state 34
    call        go to state 35
    objectdef   go to state 36
    const       go to state 40


State 182

   72 indexedelem: LEFT_BRACE expr COLON expr RIGHT_BRACE •

    $default  reduce using rule 72 (indexedelem)


State 183

   58 call: LEFT_PAREN funcdef RIGHT_PAREN LEFT_PAREN elist RIGHT_PAREN •

    $default  reduce using rule 58 (call)


State 184

   64 methodcall: DOT_DOT IDENT LEFT_PAREN $@5 elist • RIGHT_PAREN
   66 elist: elist • COMMA expr

    RIGHT_PAREN  shift, and go to state 189
    COMMA        shift, and go to state 115


State 185

   92 idlists: COMMA • IDENT $@9 idlists

    IDENT  shift, and go to state 190


State 186

   89 idlist: IDENT $@8 idlists •

    $default  reduce using rule 89 (idlist)


State 187

  105 forstmt: forprefix N elist RIGHT_PAREN N stmt • N

    $default  reduce using rule 101 (N)

    N  go to state 191


State 188

   15 expr: expr • PLUS expr
   16     | expr • MINUS expr
   17     | expr • MULTIPLICATION expr
   18     | expr • DIVISION expr
   19     | expr • MODULO expr
   20     | expr • GREATER_THAN expr
   21     | expr • GREATER_OR_EQUAL expr
   22     | expr • LESS_THAN expr
   23     | expr • LESS_OR_EQUAL expr
   24     | expr • EQUAL expr
   25     | expr • NOT_EQUAL expr
   29 exprANDOR: expr • $@1 AND Q expr
   31          | expr • $@2 OR Q expr
  104 forprefix: FOR $@10 LEFT_PAREN elist SEMICOLON M expr • SEMICOLON

    PLUS              shift, and go to state 74
    MINUS             shift, and go to state 75
    MULTIPLICATION    shift, and go to state 76
    DIVISION          shift, and go to state 77
    MODULO            shift, and go to state 78
    EQUAL             shift, and go to state 79
    NOT_EQUAL         shift, and go to state 80
    GREATER_THAN      shift, and go to state 81
    LESS_THAN         shift, and go to state 82
    GREATER_OR_EQUAL  shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84
    SEMICOLON         shift, and go to state 192

    OR        reduce using rule 30 ($@2)
    $default  reduce using rule 28 ($@1)

    $@1  go to state 86
    $@2  go to state 87


State 189

   64 methodcall: DOT_DOT IDENT LEFT_PAREN $@5 elist RIGHT_PAREN •

    $default  reduce using rule 64 (methodcall)


State 190

   92 idlists: COMMA IDENT • $@9 idlists

    $default  reduce using rule 91 ($@9)

    $@9  go to state 193


State 191

  105 forstmt: forprefix N elist RIGHT_PAREN N stmt N •

    $default  reduce using rule 105 (forstmt)


State 192

  104 forprefix: FOR $@10 LEFT_PAREN elist SEMICOLON M expr SEMICOLON •

    $default  reduce using rule 104 (forprefix)


State 193

   92 idlists: COMMA IDENT $@9 • idlists

    COMMA  shift, and go to state 185

    $default  reduce using rule 93 (idlists)

    idlists  go to state 194


State 194

   92 idlists: COMMA IDENT $@9 idlists •

    $default  reduce using rule 92 (idlists)
